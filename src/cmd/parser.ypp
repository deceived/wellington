%{

#include "order.hpp"

%}

%debug

%defines

%skeleton "lalr1.cc"

%name-prefix "order"

%define "parser_class_name" { Parser }

%locations
%initial-action
{
	@$.begin.filename = @$.end.filename = &driver.name_;
}

%parse-param { class Driver& driver }

%error-verbose

%union {
	int	integerVal;
	double doubleVal;
	std::string* wordVal;
	class Order* order;
}

%token  			END		0 "end of file"
%token <integerVal> INTEGER   "integer"
%token <doubleVal>  DOUBLE    "double"
%token <wordVal>    WORD      "word"

%token				PERIOD 
%token				WS

%{

#include "driver.hpp"
#include "scanner.hpp"

#undef yylex
#define yylex driver.lexer_->lex

%}

%%

start				:	order PERIOD END
						{
						}


order				:	WORD
						{
						}
					|	WORD WS order
						{
						}
					;

%%

void order::Parser::error(  const Parser::location_type& l,
							const std::string& m )
{
	driver.Error( l, m );
}

